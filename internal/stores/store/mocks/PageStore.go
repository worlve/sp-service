// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"
import page "github.com/worlve/sp-service/internal/models/page"

// PageStore is an autogenerated mock type for the PageStore type
type PageStore struct {
	mock.Mock
}

// CanEditPage provides a mock function with given fields: pageGUID, userID
func (_m *PageStore) CanEditPage(pageGUID string, userID string) (bool, error) {
	ret := _m.Called(pageGUID, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(pageGUID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(pageGUID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CanReadPage provides a mock function with given fields: pageGUID, userID
func (_m *PageStore) CanReadPage(pageGUID string, userID string) (bool, error) {
	ret := _m.Called(pageGUID, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(pageGUID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(pageGUID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePage provides a mock function with given fields: record, ownerID
func (_m *PageStore) CreatePage(record page.Page, ownerID int64) (page.Page, error) {
	ret := _m.Called(record, ownerID)

	var r0 page.Page
	if rf, ok := ret.Get(0).(func(page.Page, int64) page.Page); ok {
		r0 = rf(record, ownerID)
	} else {
		r0 = ret.Get(0).(page.Page)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(page.Page, int64) error); ok {
		r1 = rf(record, ownerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPage provides a mock function with given fields: pageGUID
func (_m *PageStore) GetPage(pageGUID string) (page.Page, error) {
	ret := _m.Called(pageGUID)

	var r0 page.Page
	if rf, ok := ret.Get(0).(func(string) page.Page); ok {
		r0 = rf(pageGUID)
	} else {
		r0 = ret.Get(0).(page.Page)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pageGUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPages provides a mock function with given fields: userID, nextBatchID, limit
func (_m *PageStore) GetPages(userID string, nextBatchID string, limit int) ([]page.Page, int, string, error) {
	ret := _m.Called(userID, nextBatchID, limit)

	var r0 []page.Page
	if rf, ok := ret.Get(0).(func(string, string, int) []page.Page); ok {
		r0 = rf(userID, nextBatchID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]page.Page)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, string, int) int); ok {
		r1 = rf(userID, nextBatchID, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(string, string, int) string); ok {
		r2 = rf(userID, nextBatchID, limit)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string, string, int) error); ok {
		r3 = rf(userID, nextBatchID, limit)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetUniquePageGUID provides a mock function with given fields: proposedPageGUID
func (_m *PageStore) GetUniquePageGUID(proposedPageGUID string) (string, error) {
	ret := _m.Called(proposedPageGUID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(proposedPageGUID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(proposedPageGUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePage provides a mock function with given fields: pageGUID
func (_m *PageStore) RemovePage(pageGUID string) error {
	ret := _m.Called(pageGUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(pageGUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePage provides a mock function with given fields: record
func (_m *PageStore) UpdatePage(record page.Page) error {
	ret := _m.Called(record)

	var r0 error
	if rf, ok := ret.Get(0).(func(page.Page) error); ok {
		r0 = rf(record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
